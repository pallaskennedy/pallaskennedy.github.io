/*--120-standard-max--------------------------------------------------------------------------------------------------*/
/* a common set of properties used to ensure elements are completely hidden visually */

/* The span[class~="sr-only"] selector will select any span element whose class includes sr-only.  */
/* The CSS clip property is used to define the visible portions of an element.  */
/* The clip-path property determines the shape the clip property should take.  A clip-path property of inset(50%) forms 
the clip-path into a rectangle within the element. */
/* height and width to 1px creates physical space to work with */
/* To prevent the text content from overflowing, give your span[class~="sr-only"] selector an overflow property set to 
hidden and a white-space property set to nowrap. */
/* Take these hidden elements out of the document flow:  Give the span[class~="sr-only"] selector a position property 
set to absolute, a padding property set to 0, and a margin property set to -1px. This will ensure that not only are they 
no longer visible, but they are not even within the page view. */
/* The ~= operator means that the value of the class attribute must contain the word sr-only as a separate word 
within a space-separated list of classes. */
/* Rather than having to constantly double-check you are not overwriting your earlier properties, you can use the !important
 keyword to ensure thes */
span[class~="sr-only"] {
  border: 0 !important;
  clip: rect(1px, 1px, 1px, 1px) !important;
  clip-path: inset(50%) !important;
  height: 1px !important;
  width: 1px !important;
  overflow: hidden !important;
  white-space: nowrap !important;
  position: absolute !important;
  padding: 0 !important;
  margin: -1px !important;
}
/* ------------------------------------------------------------------------------------------------------------------- */
html {
  box-sizing: border-box;
}
body {
  font-family: sans-serif;
  color: #0a0a23;
  text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5); /* Dark shadow */
}

h1 {
  max-width: 37.25rem;
  margin: 0 auto;
  padding: 1.5rem 1.25rem;
}

h1 .flex {
  display: flex; /* enable the flexbox layout */
  flex-direction: column-reverse; /* display the nested elements from bottom to top */
  gap: 1rem; /*  create some space between the elements */
}
/*  target the first span element in your .flex container. Remember that your span elements are reversed, visually, so 
this will appear to be the second element on the page. */
h1 .flex span:first-of-type {
  font-size: 0.7em;
}
/* target the last span in your flex container, and give it a font-size property set to 1.2em to make it look like a 
header. */
h1 .flex span:last-of-type {
  font-size: 1.2em;
}

section {
  max-width: 40rem;
  margin: 0 auto;
  border: 2px solid #d0d05d;
}

/* enable flexbox, justify the content to the end of the flex direction, and make the element sticky.  */
#years {
  display: flex;
  justify-content: flex-end;
  position: sticky;
  top: 0;
  color: #fff;
  background-color: #0a0a23;

  margin: 0 -2px;
  padding: 0.5rem calc(1.25rem + 2px) 0.5rem 0;

  z-index: 999;
}

#years span[class] {
  font-weight: bold;
  width: 4.5rem;
  text-align: right;
}
.table-wrap {
  padding: 0 0.75rem 1.5rem 0.75rem;
}
/* The :not() pseudo-selector is used to target all elements that do not match the selector - in this 
case, any of your span elements that do not have the sr-only class. This ensures that your earlier rules 
for the span[class~="sr-only"] selector are not overwritten. */

/* span:not(.sr-only) {
  font-weight: normal;
} */

/* 1. border-collapse: collapse;

	•	Function: This property changes the way borders are rendered in a table. When set to collapse, adjacent 
  table cell borders merge into a single border rather than being rendered separately.
	•	Effect: This means that instead of having double borders between cells, you get a single border where 
  the cells meet. This creates a cleaner and more streamlined look for the table.

2. border: 0;

	•	Function: This property sets the border width to zero, effectively hiding any visible borders around the 
  table and its cells.
	•	Effect: When you set the border to 0, it removes any visual indication of borders, making the table appear 
  borderless. This is particularly useful when you want to create a minimalist design or when you’re styling 
  the table to fit into a specific design aesthetic.

Why Use Both Together?

Using both properties together allows you to create a table layout where:

	•	Borders are collapsed into a single border between cells (providing a unified look).
	•	The table appears borderless by hiding any visible borders.
 */
table {
  border-collapse: collapse; /* Merge adjacent borders */
  border: 0; /* Hide the borders completely */

  width: 100%;
  position: relative;
  margin-top: 3rem;
}
td {
  border: 0; /* Ensure individual cells have no visible borders */
  padding: 0; /* Remove padding to eliminate gaps */
}

table caption {
  color: #e0ffff;
  font-size: 1.3em;
  font-weight: normal;
  position: absolute;
  top: -2.25rem;
  left: 0.5rem;
}
/* Give them a width to fill the viewport, with a minimum and maximum of 4rem. This
 approach ensures that the width is fixed, whereas setting width specifically would
  allow the elements to shrink to the container. */
tbody td {
  width: 100vw;
  min-width: 4rem;
  max-width: 4rem;
}

tbody th {
  width: calc(100% - 12rem);
}

/* The [attribute="value"] selector targets any element that has an attribute with
 a specific value.
 
 The key difference between tr[class="total"] and tr.total is that the first will select 
 tr elements where the only class is total. The second will select tr elements where the 
 class includes total.
 */
tr[class="total"] {
  /* border-bottom: 4px double #b8860b; */
  border-bottom: 4px double rgba(255, 215, 0, 0.7); /* 70% opacity for a softer look */
  font-weight: bold;
}

tr[class="total"] th {
  text-align: left;
  padding: 0.5rem 0 0.25rem 0.5rem;
}

tr.total td {
  text-align: right;
  padding: 0 0.25rem;
}

/* The :nth-of-type() pseudo-selector is used to target specific elements based on 
their order among siblings of the same type. 

target the third td element within your total table rows and give it a right padding 
of 0.5rem.*/
tr.total td:nth-of-type(3) {
  padding: 0.5rem;
}
tr.total:hover {
  background-color: #a59471;
}
td[class="current"] {
  font-style: italic;
}
tr.data {
  background-image: linear-gradient(to bottom, #5c3d4d 1.845rem, #555 1.845rem);
}

tr.data th {
  text-align: left;
  padding-top: 0.3rem;
  padding-left: 0.5rem;
}
tr.data th .description {
  display: block;
  font-style: italic;
  font-weight: normal;
  padding: 1rem 0 0.75rem;
  margin-right: -13.5rem;
}
tr.data td {
  vertical-align: top;
  padding: 0.3rem 0.25rem 0;
  text-align: right;
}
tr.data td:last-of-type {
  padding-right: 0.5rem;
}
