*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}
html {
  font-size: 62.5%; /* 1rem = 10px */
}
body {
  font-family: Baskervville, serif;
  color: linen;
  background-color: rgb(
    20,
    30,
    40
  ) !important; /* Corrected placement of !important */
}
h1 {
  font-family: Anton, sans-serif;
}
h2,
h3,
h4,
h5,
h6 {
  font-family: Raleway, sans-serif;
}

a {
  text-decoration: none;
  color: linen;
}
/* CSS Grid offers a two-dimensional grid-based layout, allowing you to center items horizontally and 
vertically while still retaining control to do things like overlap elements. */
/* display: flex;

	•	Purpose: Flexbox is designed for one-dimensional layouts, either in a row or a column. It’s great for aligning 
  items within a single axis (horizontal or vertical).
	•	Main Features:
	•	Flex Direction: You can control the direction of the flex items (row or column) using flex-direction.
	•	Alignment: Easily aligns items with properties like justify-content (for horizontal alignment) and align-items 
  (for vertical alignment).
	•	Responsive Behavior: Flex items can grow or shrink to fill available space, making it ideal for responsive designs.
	•	Order Control: You can change the order of flex items visually without altering the HTML structure.
	•	Use Cases:
	•	Navigation bars
	•	Centering elements
	•	Arranging items in a row or a column, such as cards or buttons
 */
/* display: grid;

	•	Purpose: Grid layout is designed for two-dimensional layouts, allowing you to control both rows and columns
   simultaneously. It’s excellent for creating complex layouts.
	•	Main Features:
	•	Grid Template: You can define rows and columns explicitly using properties like grid-template-rows and 
  grid-template-columns.
	•	Item Placement: You can place items anywhere on the grid using grid-column and grid-row properties.
	•	Gaps: Easily manage the space between grid items with grid-gap (or gap).
	•	Responsiveness: CSS Grid allows for responsive designs using media queries to redefine grid structure.
	•	Use Cases:
	•	Webpage layouts with headers, sidebars, and content areas
	•	Image galleries
	•	Complex data tables */

/* When to Use Each:

	•	Use Flexbox: When you need to align items along a single axis or create simple layouts. It’s great for smaller 
  components within a larger layout.
	•	Use Grid: When you need to create more complex layouts that involve both rows and columns. It’s better for overall
   page layouts and managing larger design structures.
 */

main {
  display: grid;
  grid-template-columns:
    minmax(2rem, 1fr) /* First column: Minimum 2rem, maximum 1fr */
    minmax(min-content, 94rem) /* Second column: Minimum 2rem, maximum 94rem */
    minmax(2rem, 1fr); /* Third column: Minimum 2rem, maximum 1fr */

  row-gap: 3rem;
}
/* adjust the placement in the child rules.

One option is the grid-column property, which is shorthand for grid-column-start and grid-column-end. 
The grid-column property tells the grid item which grid line to start and end at.

 */

.heading {
  grid-column: 2 / 3; /* start at grid line 2 and end at grid line 3 */
  display: grid;
  grid-template-columns: repeat(2, 1fr);

  row-gap: 1.5rem;
}

/* Your .text element is not a CSS Grid, but you can create columns within an element without 
using Grid by using the column-width property. */
/* Magazines often use justified text in their printed content to structure their layout and 
control the flow of their content. While this works in printed form, justified text on websites 
can be an accessibility concern, for example presenting challenges for folks with dyslexia.

To make your project look like a printed magazine, give the .text selector a text-align property
 set to justify. */
.text {
  grid-column: 2 / 3;
  font-size: 1.8rem;
  letter-spacing: 0.6px;
  column-width: 25rem;
  text-align: justify;
}
/* The ::first-letter pseudo-selector allows you to target the first letter in the text content 
of an element. */
/* The other text has been shifted out of place. Move it into position by giving the 
.first-paragraph::first-letter selector a float property set to left and a margin-right property
set to 1rem. */
.first-paragraph::first-letter {
  font-size: 6rem;
  color: orangered;

  float: left;
  margin-right: 1rem;
}

.quote {
  color: #00beef;
  font-size: 2.4rem;
  text-align: center;

  font-family: Raleway, sans-serif;
}
.quote::before {
  content: '" '; /* Adds an opening quotation mark followed by a space */
}

.quote::after {
  content: ' "'; /* Adds a closing quotation mark preceded by a space */
}

/* You will need to have a column for text and a column for images. */
.text-with-images {
  display: grid;

  grid-template-columns: 1fr 2fr;
  column-gap: 3rem;

  margin-bottom: 3rem;
}
.lists {
  list-style-type: none;

  margin-top: 2rem;
}
.lists li {
  margin-bottom: 1.5rem;
}
.list-title,
.list-subtitle {
  color: #00beef;
}
/* The images should be within a two column, three row layout. This will give our grid rows that adjust 
in height based on the content, but columns that remain a fixed width based on the container. */
/* The gap property is a shorthand way to set the value of column-gap and row-gap at the same time.
 If given one value, it sets the column-gap and row-gap both to that value. If given two values, it sets
  the row-gap to the first value and the column-gap to the second.
 */
/* The place-items property can be used to set the align-items and justify-items values at the same time. 
 The place-items property takes one or two values. If one value is provided, it is used for both the
  align-items and justify-items properties. If two values are provided, the first value is used for the 
  align-items property and the second value is used for the justify-items property. */
.image-wrapper {
  display: grid;
  grid-template-columns: 2fr 1fr;
  grid-template-rows: repeat(3, min-content);
  gap: 2rem;

  place-items: center;
}
.image-1,
.image-3 {
  grid-column: 1 /-1;
}
.hero {
  grid-column: 1 / -1;

  position: relative;
}
/* The object-fit property tells the browser how to position the element within its container. 
In this case, cover will set the image to fill the container, cropping as needed to avoid changing
 the aspect ratio.

 */
img {
  width: 100%;
  object-fit: cover;
}
hr {
  margin: 1.5rem 0;
  border: 1px solid rgba(120, 120, 120, 0.6);
}

.hero-title {
  text-align: center;
  color: orangered;
  font-size: 8rem;
}
.hero-subtitle {
  font-size: 2.4rem;
  color: orangered;
  text-align: center;
}
.author {
  font-size: 2rem;
  font-family: Raleway, sans-serif;
}
.author-name a:hover {
  background-color: #306203;
}
.publish-date {
  color: rgba(255, 255, 255, 0.5);
}

/* If you wanted to add more social icons, but keep them on the same row, you would need to 
update grid-template-columns to create additional columns. As an alternative, you can use the 
grid-auto-flow property.

This property takes either row or column as the first value, with an optional second value of 
dense. grid-auto-flow uses an auto-placement algorithm to adjust the grid layout. Setting it to 
column will tell the algorithm to create new columns for content as needed. The dense value 
allows the algorithm to backtrack and fill holes in the grid with smaller items, which can result 
in items appearing out of order.
 */
/* Now the auto-placement algorithm will kick in when you add a new icon element. However, the 
 algorithm defaults the new column width to be auto, which will not match your current columns.

You can override this with the grid-auto-columns property. Give the .social-icons selector a 
grid-auto-columns property set to 1fr. */
.social-icons {
  display: grid;
  font-size: 3rem;
  grid-template-columns: repeat(5, 1fr);

  grid-auto-flow: column;

  grid-auto-columns: 1fr;
  align-items: center;
}

@media only screen and (max-width: 720px) {
  .image-wrapper {
    grid-template-columns: 1fr;
  }
}

@media only screen and (max-width: 600px) {
  .text-with-images {
    grid-template-columns: 1fr;
  }
}

@media only screen and (max-width: 550px) {
  .hero-title {
    font-size: 6rem;
  }

  .hero-subtitle,
  .author,
  .quote,
  .list-title {
    font-size: 1.8rem;
  }

  .social-icons {
    font-size: 2rem;
  }

  .text {
    font-size: 1.6rem;
  }
}
@media only screen and (max-width: 420px) {
  .hero-title {
    font-size: 4.5rem;
  }
}
