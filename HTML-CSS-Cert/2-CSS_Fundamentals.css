/*	
## 2. CSS Fundamentals

### 2.1 Analyze and implement inline styles, internal (embedded) style sheets, and external style sheets

- When to use inline styles, internal (embedded) style sheets, or external style sheets; precedence when using a combination of inline styles and style sheets; browser default style

### 2.2 Construct and analyze rule sets

- Valid syntax for the CSS rule set, selectors (class, id, elements, pseudoclass, and descendent)

*/

/* ----------------------------------------------------------------------------------------------------------------------- */
/* ----------------------------------------------------------------------------------------------------------------------- */
/* Inline Styles

	When to Use:
		For applying a style to a specific element directly.
		Useful for quick, one-off styling or when you need to override other styles.
		When styles need to be applied dynamically (via JavaScript).

	When to avoid inline styles: 
		Large projects because they hinder scalability and make debugging harder.
	
	Performance: 
		Inline styles can make it harder for browsers to cache styles efficiently, potentially impacting performance.
	
	Example Use Cases:
		Changing the color of a button when clicked.
		Overriding styles for a single element on a page, for example, <h1 style="color: red;">Welcome</h1>.

	Drawbacks:
		Styles cannot be reused across multiple elements.
		Inline styles make it harder to maintain and scale the page’s design.
		Reduces separation of concerns between content and presentation.
 */
/* Internal (Embedded) Style Sheets

	When to Use:
		When you want to style a page specifically and don’t want to create a separate CSS file.
		For small projects or prototypes, or when styles are specific to a single page and won’t be reused.
		For overriding external styles when it is difficult to modify the linked stylesheet.
		Single Page Application (SPA) or single page with unique stying
	
	Limitations: 
		more manageable than inline styles in complex documents 
		
	Example Use Cases:
		For a single-page website or a section-specific style.
		Styling HTML elements within the <head> tag using the <style> tag: <style> body { background-color: lightgray; } </style>.

	Drawbacks:
		Styles are not reusable across multiple pages.
		The HTML file size increases because the styles are embedded within the page.
		Less maintainable compared to using external stylesheets. */

/* External Style Sheets

	When to Use:
		For larger projects or when you have multiple pages that need consistent styling.
		When you want to separate your content (HTML) from your presentation (CSS) for easier maintenance and better code organization.
		For reusability, allowing one stylesheet to be linked to multiple HTML files.
	
	Performance Note: 
		External style sheets can be cached by browsers, improving page load time for returning visitors. 
		This is one of their primary advantages over inline or internal styles.

	Example Use Cases:
		Websites with multiple pages or large-scale web applications.
		When styling is shared across many pages using the <link> tag in the <head> section: <link rel="stylesheet" href="styles.css">.

	Drawbacks:
		changes can be harder to debug
		may need to clear the cache to see changes
		Requires an extra HTTP request to load the external stylesheet.
		If the external file is large, it could slow down initial page load times. 
*/

/* The Cascade */
/*  
Using !important overrides other declarations in certain cases, 
	Should be avoided
 */

/* Precedence */
/* 	1.	Inline styles (within the HTML element itself, using the style attribute) – highest precedence.
	2.	Internal (embedded) styles (within the <style> tags in the <head> section) – second highest.
	3.	External styles (linked with <link> tags pointing to an external CSS file) – lowest precedence.
 */
/* Specificity */
/*  inline styles have higher specificity than ID selectors, and ID selectors are more specific than class selectors */
/* Inline (closest to the html) -> ID (unique) -> Class (created general) -> type selectors (most general) */

/* If two conflicting styles apply at the same specificity level, the later one in the document will be used. */

/* Browser Default Styles */
/* 
When to use browser default styles:

		Prototyping or quick mockups
		Minimal styling
		Content-driven design (like blogs)
    
When not to rely on browser default styles:

		Consistent design across browsers
		Custom branding or theme
		Interactive or complex layouts
		Responsive design
    
Best practice: start with a CSS reset or normalize.css to ensure a more consistent baseline style across different browsers. 
 */

/* ----------------------------------------------------------------------------------------------------------------------- */
/* ----------------------------------------------------------------------------------------------------------------------- */
/* Components of a CSS Rule Set:

	1.	Selector: 
		Identifies the HTML element(s) that the rule applies to. Can be an element type, class , id, or another CSS selector
	2.	Declaration Block: 
		Enclosed in curly braces {}, it contains one or more declarations separated by semicolons.
	3.	Declarations: 
		Each declaration consists of property: value; pair 
		Property: Refers to the style property you want to change (e.g., color, font-size, background-color).
	        Value: The value for that property (e.g., red, 16px, #ff0000).

	Syntax:
		values are separated by a colon (:), not a semicolon 
		semicolon separates declarations within the declaration block
		When there are multiple properties within a rule set, separate them with semicolon (;)
h1 {
  color: blue;
  font-size: 24px;
}
    General Notes:
	    Whitespace: CSS ignores extra whitespace, so extra spaces or line breaks before or after the properties 
		or values do not affect the outcome. However, for readability, it is best to keep consistent indentation and spacing.
	    Commenting: CSS allows comments inside the rule set with comment marks. 
		Comments do not affect the rendering of styles.
	    Property-Value Pair: A valid property-value pair is needed. If an invalid property or value is used, 
		the declaration will be ignored by the browser.
*/
/*  */
/* Universal Selector: Use for global styles or to reset styles across all elements: */
* {
  margin: 0;
  padding: 0;
}

/* element */
element {
  property: value;
}
p {
  color: red;
}

/* classes */
.class-name {
  property: value;
}
.first-marker {
  font-size: 24px;
}
/* ID (can only be used once on the page */
#id-name {
  property: value;
}
#author-name {
  background-color: lightblue;
}
/* pseudoclasses */
element:pseudo-class {
  property: value;
}
a:hover {
  color: green;
}

p:first-child {
  font-weight: bold;
}

a:focus {
  outline: 2px solid blue;
}

button:active {
  background-color: lightgray;
}
/* 	Common Pseudo-classes:
		:hover: When the element is hovered.
		:focus
		:active
		:first-child: Targets the first child element within its parent.
		:nth-child(n): Targets elements based on their position in a parent (e.g., nth-child(2) targets the second child).
		:focus: When an element (such as an input) is focused. */

/* Inheritance */
/* 
	•	Child selector (>): Selects direct child elements only.
	•	Descendant selector (space): Selects all nested elements, regardless of depth.
 */
/* child */
parent-element > child-element {
  property: value;
}
.container > p {
  color: red; /* This will apply only to the first <p> element directly inside .container */
}

/* descendent */
parent-element child-element {
  property: value;
}
.container p {
  color: blue; /* This will apply to all <p> elements inside .container, including nested ones */
}

/* multiple selectors for styling multiple elements at once*/
p:first-child,
h1,
.class-name,
#ID-name {
  color: red;
}

/* Combination of selectors can help target elements more precisely, e.g., targeting a class inside an element 
        like div p or a:hover. */
/* Adjacent sibling: Targets the next immediate sibling. */
h1 + p {
  margin-top: 0;
}
/* General sibling: Selects all siblings that follow the specified element. */
h1 ~ p {
  color: green;
}

/* Additional Enhancements:

CSS Specificity:
	More specific selectors (like #id-name) will override more general ones (like p, div, etc.
	Inline styles are the most specific, but they are not the most recommended method in modern CSS practices 
		due to the difficulty in maintaining them. 
	Giving a brief explanation of how to use CSS specificity to handle conflicts is valuable.

Performance Considerations:
	CSS performance can be impacted by the number of selectors or specificity, especially when targeting a lot of DOM 
		elements with complex selectors. Simpler selectors tend to be faster. 

Conflict Resolution Based on Specificity
	Inline styles will always override other styles.
	IDs will override classes and element selectors.
	Classes will override element selectors.
	The rule that appears last in the stylesheet (if the specificity is the same) will take precedence.

	
	Specificity: 0,0,0,1 (Element selector)
		p { color: blue; }

	Specificity: 0,0,1,0 (Class selector)
		.text { color: green; }

	Specificity: 0,1,0,0 (ID selector)
		#unique { color: purple; }

	Specificity: 1,0,0,0 (Inline style)
		<p class="text" id="unique" style="color: red;">Hello!</p>
	
	Result:
		The inline style will apply (color: red), because inline styles have the highest specificity.
		The ID selector (#unique) would apply color: purple ONLY if there were no inline style.
		The class selector (.text) would apply color: green ONLY if neither the ID nor inline style were present.
		The element selector (p) would apply color: blue only ONLY if none of the other more specific rules were present.

Best Practices for Handling Conflicts:
	Avoid using inline styles unless absolutely necessary.
	Be mindful of ID selectors, as they have high specificity and can lead to difficulty overriding styles later.
	Use classes for most of your styles to maintain flexibility and readability.
	Consider using more specific selectors or !important (with caution) to resolve conflicts when necessary.

*/

/* Final thoughts */
/* The use of the word “analyze” in this objective likely refers to understanding and resolving issues 
related to the CSS cascade, specificity, and conflict resolution. These concepts are central to how CSS 
styles are applied and how conflicting styles are handled. Here’s a breakdown:

Cascade
	The CSS cascade refers to how multiple CSS rules are applied to the same element. 
	The cascade determines the order of precedence, based on:
		1.	Importance (e.g., inline styles are considered the most important).
		2.	Specificity (ID selectors have higher specificity than class or element selectors).
		3.	Source order (if two rules have the same specificity, the rule that appears last in the CSS will be applied).

Specificity
	CSS specificity is a scoring system that helps determine which styles are applied when more than one rule 
	targets the same element. It is calculated based on the type of selectors used:
		•	Inline styles have the highest specificity.
		•	ID selectors have higher specificity than class selectors.
		•	Class selectors have higher specificity than element selectors.

Conflict Resolution
	When conflicting styles are applied (due to overlapping rules), specificity and cascade order help determine 
	which rule “wins.” The most specific or the most recently declared rule will be the one applied to the element.

 */
