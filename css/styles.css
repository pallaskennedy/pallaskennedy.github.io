/* Reset/Normalize Styles (optional): 
Start with any CSS reset or normalize styles to ensure consistency across browsers.*/
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* Global Styles 
Set global styles for body, headings, paragraphs, etc. This includes default font sizes, colors, and margins.*/
a {
  color: black;
}

/*A pseudo-selector in CSS is used to style elements based on their state or position 
in the document, even if those states aren’t explicitly defined in the HTML.*/
a:active {
  color: white; /* should turn white while clicking*/
}

a:hover {
  color: brown; /* should turn brown on mouseover*/
}

a:visited {
  color: grey; /* should turn grey after click */
}

footer {
  font-size: 14px;
}

h1,
h2,
p {
  text-align: center;
}

h1,
h2 {
  font-family: "Chalkduster", Fantasy, Impact, Haettenschweiler,
    "Arial Narrow Bold", sans-serif;
}

h1 {
  font-size: 40px;
  margin-top: 10px;
  margin-bottom: 15px;
}

h2 {
  font-size: 30px;
  margin-top: 10px;
  margin-bottom: 15px;
}

img {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

figcaption {
  text-align: center;
}

/* Layout Styles 
Define styles for layout elements, such as headers, footers, navigation, and main content areas.*/
/* Notes:  Use id for a unique element that appears only once on the page. id is selected with # */

#cats {
  background-color: burlywood;
  margin-left: auto;
  margin-right: auto;
  padding: 20px;
  width: 80%;
}

#coffee {
  background-image: url(https://cdn.freecodecamp.org/curriculum/css-cafe/beans.jpg);
  font-family: sans-serif, "Trebuchet MS", "Lucida Sans Unicode",
    "Lucida Grande", "Lucida Sans", Arial, sans-serif;
  padding: 20px;
}

hr {
  background-color: RGB(128, 64, 0);
  border-color: RGB(128, 64, 0);
  height: 2px;
}

/* Component Styles 
Style individual components or modules, like buttons, forms, cards, etc.*/
/* Notes: Use class for styling or functionality that will apply to multiple elements. class is selected with . */

.address {
  margin-bottom: 5px;
}

.bottom-line {
  margin-top: 25px;
}
/* cafe menu */
.flavor,
.dessert {
  text-align: left;
  width: 75%;
}

.menu {
  background-color: burlywood;
  margin-left: auto;
  margin-right: auto;
  max-width: 500px;
  padding: 20px;
  width: 80%;
}

.price {
  text-align: right;
  width: 25%;
}

/* markers */
/*
 With hex colors, 00 is 0% of that color, and FF is 100%. So #00FF00 translates to 0% red, 100% green, 
 The HSL color model, or hue, saturation, and lightness, is another way to represent colors.
 The CSS hsl function accepts 3 values: a number from 0 to 360 for hue, a percentage from 0 to 100 
 for saturation, and a percentage from 0 to 100 for lightness.
 If you imagine a color wheel, the hue red is at 0 degrees, green is at 120 degrees, and blue 
 is at 240 degrees.
 Saturation is the intensity of a color from 0%, or gray, to 100% for pure color. You must include
 the percent sign % to the saturation and lightness values.
 Lightness is how bright a color appears, from 0%, or complete black, to 100%, complete white, 
 with 50% being neutral.

  If no gradientDirection argument is provided to the linear-gradient function, it arranges colors from 
  top to bottom, or along a 180 degree line, by default.

 Color-stops allow you to fine-tune where colors are placed along the gradient line. They are a length 
 unit like px or percentages that follow a color in the linear-gradient function. The linear-gradient 
 function automatically calculates these values for you, and places colors evenly along the gradient 
 line by default.  They color-stop values in .red are unnecessary
*/
/* box-shadow: offsetX offsetY blurRadius spreadRadiuscolor; 
both offsetX and offsetY accept number values in px and other CSS units
a positive offsetX value moves the shadow right and a negative value moves it left
a positive offsetY value moves the shadow down and a negative value moves it up
if you want a value of zero (0) for any or both offsetX and offsetY, you don't need 
to add a unit. Every browser understands that zero means no change.
The height and width of the shadow is determined by the height and width of the element 
it's applied to. You can also use an optional spreadRadius value to spread out the reach 
of the shadow. More on that later.
If a blurRadius value isn't included, it defaults to 0 and produces sharp edges. The higher
 the value of blurRadius, the greater the blurring effect is.


*/

.container {
  background-color: rgb(255, 255, 255);
  padding: 10px 0px;
}

.marker {
  height: 25px;
  margin: 10px auto;
  width: 200px;
}
.red {
  background: linear-gradient(
    180deg,
    rgb(137, 0, 0) 0,
    rgb(255, 0, 0) 50%,
    rgb(125, 0, 0) 100%
  );
  box-shadow: 0 0 20px 0 rgba(83, 14, 14, 0.8);
}

.green {
  background: linear-gradient(180deg, #55680d, #00ff00, #116c31);
  box-shadow: 0 0 20px 0 #3b7e20cc;
}

.blue {
  background: linear-gradient(
    hsl(186, 76%, 16%),
    hsl(240, 100%, 65%),
    hsl(258, 98%, 18%)
  );
  box-shadow: 0 0 20px 0 hsla(223, 59%, 31%, 0.8);
}

.dkgreen {
  background: linear-gradient(rgb(37, 64, 7), rgb(0, 127, 0), rgb(13, 56, 13));
  box-shadow: 0 0 20px 0 rgba(14, 83, 14, 0.8);
}

.yellow {
  background: linear-gradient(
    rgb(161, 161, 41),
    rgb(255, 255, 0),
    rgb(111, 111, 10)
  );
  box-shadow: 0 0 20px 0 rgba(83, 83, 14, 0.8);
}
.cyan {
  background: linear-gradient(
    rgb(0, 141, 99),
    rgb(0, 255, 255),
    rgb(0, 139, 177)
  );
  box-shadow: 0 0 20px 0 rgba(14, 83, 83, 0.8);
}
.magenta {
  background: linear-gradient(
    rgb(147, 0, 147),
    rgb(255, 0, 255),
    rgb(107, 0, 107)
  );
  box-shadow: 0 0 20px 0 rgba(83, 14, 83, 0.8);
}
.orange {
  background: linear-gradient(
    rgb(160, 80, 0),
    rgb(255, 127, 0),
    rgb(122, 61, 0)
  );
  box-shadow: 0 0 20px 0 rgba(83, 47, 14, 0.8);
}
.pink {
  background: linear-gradient(
    rgb(161, 9, 85),
    rgb(255, 0, 127),
    rgb(106, 12, 59)
  );
  box-shadow: 0 0 20px 0 rgba(83, 14, 47, 0.8);
}
.chartreuse {
  background: linear-gradient(
    rgb(73, 147, 0),
    rgb(127, 255, 0),
    rgb(48, 96, 0)
  );
  box-shadow: 0 0 20px 0 rgba(47, 83, 14, 0.8);
}
.spring {
  background: linear-gradient(
    rgb(18, 146, 61),
    rgb(0, 255, 127),
    rgb(17, 143, 112)
  );
  box-shadow: 0 0 20px 0 rgba(14, 83, 47, 0.8);
}
.violet {
  background: linear-gradient(
    rgb(83, 9, 101),
    rgb(127, 0, 255),
    rgb(53, 12, 133)
  );
  box-shadow: 0 0 20px 0 rgba(47, 14, 83, 0.8);
}
.azure {
  background: linear-gradient(
    rgb(12, 105, 156),
    rgb(0, 127, 255),
    rgb(15, 4, 101)
  );
  box-shadow: 0 0 20px 0 rgba(14, 47, 83, 0.8);
}
/*
 With the CSS opacity property, you can control how opaque or transparent an element is.
 With the value 0, or 0%, the element will be completely transparent, and at 1.0, or 100%, 
 the element will be completely opaque like it is by default.

 alpha channel also controls opacity using rgba(redValue, greenValue, blueValue, alphaValue);

*/
.cap {
  width: 60px;
  height: 25px;
}

.sleeve {
  width: 110px;
  height: 25px;
  background-color: rgba(255, 255, 255, 0.5);
  border-left: 10px double rgba(0, 0, 0, 0.75);
  border-right: 3px solid rgba(0, 0, 0, 0.75);
}

.cap,
.sleeve {
  display: inline-block;
}

/* Utility Classes 
Add utility classes for margin, padding, text alignment, etc., that can be reused throughout your site.*/
/*  Notes: style all the <p> elements nested inside elements with a class named item 
both <p> elements inside the .item class will be styled */
/* Notes: inline-block elements only take up the width of their content 
which necessitates a width property to the flavor and price */
.item p {
  display: inline-block;
  font-size: 18px;
  margin-bottom: 5px;
  margin-top: 5px;
}

/* Media Queries Optional: Add media queries here for responsive design 
Place responsive design styles, typically at the end of the stylesheet, so they can override previous styles as needed.*/

/*  guidelines for stylesheets
1. Consistent Structure

  •  Reset/Normalize: At the top, include a CSS reset or normalize.css to ensure consistency across browsers.
  •  Global Styles: Define global styles for HTML elements (e.g., body, p, a, h1-h6) and any base styles like typography, color scheme, and spacing.
  •  Layout: Organize styles for the main layout containers like header, footer, and content areas.
  •  Components: Group styles by specific components (e.g., buttons, forms, cards).
  •  Utilities/Helpers: Include utility classes (e.g., .text-center, .hide) at the bottom.

2. Order of CSS Properties

Some developers prefer to organize CSS properties within each rule set in a particular order, such as:

  •  Outside-in Approach: Arrange properties starting from the outer box model to the inner content.
  •  Alphabetical Order: Another common practice is to list properties alphabetically for consistency.

3. Modular CSS

Write modular and reusable CSS by using classes over element selectors, and consider using methodologies like:

  •  BEM (Block, Element, Modifier): Helps organize and name CSS classes for clarity and scope.
  •  SMACSS (Scalable and Modular Architecture for CSS): Organizes CSS into base, layout, module, state, and theme sections.

4. Media Queries

Include media queries near the rules they modify, or group them at the bottom of the stylesheet for easy management.

5. CSS Variables

Use CSS custom properties (variables) to define values that are reused throughout the stylesheet (e.g., colors, spacing, fonts).
*/
