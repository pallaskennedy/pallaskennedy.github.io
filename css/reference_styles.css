/* The :not pseudo-selector can be used to select all elements that do not match the given CSS rule.


Example Code
div:not(#example) {
  color: red;
}
  
*/
/*-120-standard-max---------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------- WORKFLOW -----------------------------------------------------*/

/* 1.   Reset/Normalize: Prep the different browsers to behave consistently.       */
/* 2.   Global Styles: Not layout, not component, not utility       */
/* 3.   Layout Styles: Framework and Structure Styling       */
/* 4.   Component Styles: UI Element Styling              */
/* 5.   Utility Classes: Class and ID styling             */
/* 6.   Media Queries (Optional): Apply different styles based on the screen size.        */

/* CSS */
/* Positioning */
/* Box Model */
/* Flexbox/Grid */
/* Typography */
/* Backgrounds */
/* Effects and Transitions */
/* Miscellaneous */

/*

Suggested Order of CSS Properties

	1.Positioning
      •	position
      •	top, right, bottom, left
      •	z-index
	2.Box Model
      •	display
      •	width, height
      •	margin, padding, border (including border-width, border-style, border-color)
	3.Flexbox/Grid (if applicable)
      •	flex properties (like flex-direction, justify-content, align-items)
      •	grid properties (like grid-template-columns, grid-template-rows)
	4.Typography
      •	font-family
      •	font-size
      •	font-weight
      •	line-height
      •	color
      •	text-align, text-decoration, text-transform
	5.Backgrounds
      •	background-color
      •	background-image
      •	background-size, background-position, background-repeat
	6.Effects and Transitions
      •	opacity
      •	box-shadow
      •	transition, transform
	7.Miscellaneous
      •	Any additional properties, such as overflow, cursor, or any specific styles related to your design.
  */

.card {
  /* Positioning */
  position: relative;
  top: 10px;
  left: 20px;

  /* Box Model */
  width: 300px;
  height: 200px;
  margin: 10px;
  padding: 15px;
  border: 2px solid #ccc;

  /* Flexbox/Grid */
  display: flex;
  flex-direction: column;
  justify-content: center;

  /* Typography */
  font-family: Arial, sans-serif;
  font-size: 16px;
  color: #333;

  /* Backgrounds */
  background-color: #f9f9f9;

  /* Effects and Transitions */
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  transition: transform 0.3s;

  /* Miscellaneous */
  overflow: hidden;
}
/*-120-standard-max---------------------------------------------------------------------------------------------------*/
/* 1. Reset/Normalize Styles (optional): 
This is like wiping down the surfaces of your house before decorating it. You’re just getting everything clean and 
neutral and ensuring that every browser starts from the same level. It helps eliminate default styles that can cause 
inconsistencies across different browsers, giving you a clean slate to work from.   */

/* CSS Reset - Removes all browser default styles */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box; /* Ensures padding & borders are included in element width/height */
}
/*The box-sizing property is used to set this behavior. By default, the content-box model is used. With this model, 
when an element has a specific width, that width is calculated based only on the element's content. Padding and border
 values get added to the total width, so the element grows to accommodate these values.
 The border-box sizing model does the opposite of content-box. The total width of the element, including padding and 
 border, will be the explicit width set. The content of the element will shrink to make room for the padding and border.
*/

html,
body {
  height: 100%; /* Ensure the body takes up full height */
  font-size: 16px; /* Base font size */
  font-family: Arial, sans-serif; /* Default font family */
}

/* Normalize Styles - Provides a consistent look across browsers */
body {
  line-height: 1.6; /* Set a common line height */
  color: #369; /* Default text color */
  background-color: #fff; /* Default background color */
}

/* Ensures that images scale properly */
img {
  max-width: 100%;
  height: auto; /* Keep aspect ratio */
  display: block; /* Remove bottom spacing in some browsers */
}

/* Ensures links are styled consistently */
a {
  text-decoration: none; /* Remove underline from links */
  color: inherit; /* Use the same color as surrounding text */
}

/* Normalize for lists */
ul,
ol {
  list-style: none; /* Remove bullet points from lists */
}

/* Normalize for buttons */
button {
  background: none;
  border: none; /* Remove button borders */
  padding: 0;
  font: inherit; /* Use the same font as the rest of the text */
  cursor: pointer; /* Cursor pointer for clickable elements */
}

/* Forms */
input,
select,
textarea,
button {
  font-family: inherit; /* Make form elements inherit the font */
  font-size: inherit; /* Make form elements inherit the font size */
  border: 1px solid #ccc; /* Light gray borders */
  padding: 0.5rem; /* Add some padding */
  border-radius: 4px; /* Rounded corners for inputs */
}

textarea {
  resize: vertical; /* Only allow vertical resizing */
}

/* Headings */
h1,
h2,
h3,
h4,
h5,
h6 {
  font-weight: bold; /* Ensure bold headings */
  line-height: 1.25; /* Consistent heading spacing */
}

/* Tables */
table {
  border-collapse: collapse; /* Collapse table borders */
  width: 100%; /* Make tables take up full width */
}

th,
td {
  padding: 0.75rem; /* Add padding to table cells */
  text-align: left; /* Align text to the left */
  border: 1px solid #ccc; /* Light gray borders for cells */
}

/* Block elements margin reset */
p,
h1,
h2,
h3,
h4,
h5,
h6,
ul,
ol,
dl,
blockquote {
  margin-bottom: 1.5rem; /* Add consistent spacing between block elements */
}

/* 2. Global Styles
Set the baseline styles for the html page. This is like ensuring that every room in a house has a cohesive look. This is 
where you actually decorate—choosing colors, fonts, and spacing that define the look and feel of your site. Use only 
general selectors like body, headings, paragraphs, images, links, figcaptions, buttons, and form elements. This includes 
defining global font sizes, colors, and spacing. You can always go back and adjust specific rooms later if needed. */

/* Body Styles */
body {
  margin: 0;
  padding: 0;
  font-family: Arial, sans-serif; /* Default font */
  font-size: 16px; /* Base font size */
  color: #333; /* Default text color */
  background-color: #f9f9f9; /* Light background color */
}

/* Headings */
h1,
h2,
h3,
h4,
h5,
h6 {
  margin: 0 0 1rem; /* Space below headings */
  color: #2c3e50; /* Heading color */
}

h1 {
  font-size: 2em; /* Size for h1 */
}

h2 {
  font-size: 1.75em; /* Size for h2 */
}

/* Paragraphs */
p {
  margin: 0 0 1rem; /* Space below paragraphs */
  line-height: 1.5; /* Space between lines */
}

/* Links */
a {
  color: #3498db; /* Default link color */
  text-decoration: none; /* No underline */
}

a:hover {
  text-decoration: underline; /* Underline on hover */
}

/* Images */
img {
  max-width: 100%; /* Responsive images */
  height: auto; /* Maintain aspect ratio */
}

/* Lists */
ul,
ol {
  margin: 0 0 1rem; /* Space below lists */
  padding-left: 1.5rem; /* Indent lists */
}

/* Buttons */
button {
  background-color: #3498db; /* Button background color */
  color: #fff; /* Button text color */
  border: none; /* No border */
  padding: 0.5rem 1rem; /* Inner spacing */
  cursor: pointer; /* Pointer on hover */
}

button:hover {
  background-color: #2980b9; /* Darker blue on hover */
}

/* Form Elements */
input,
select,
textarea {
  border: 1px solid #ccc; /* Light gray border */
  padding: 0.5rem; /* Inner spacing */
  font-size: 1rem; /* Font size for inputs */
  width: 100%; /* Full width */
}

input[type="submit"] {
  background-color: #2ecc71; /* Green submit button */
  color: #fff; /* White text */
  border: none; /* No border */
}

/* Blockquotes */
blockquote {
  font-style: italic; /* Italic style */
  margin: 0 0 1rem; /* Space below blockquotes */
  color: #7f8c8d; /* Gray color for blockquotes */
}

/* Figures */
figure {
  margin: 0 0 1rem; /* Space below figures */
}

figcaption {
  text-align: center; /* Center align caption */
  color: #7f8c8d; /* Caption color */
}
/* 3. Layout Styles 
Define styles for the overall structure of the webpage. Think of this as styling the different rooms in the house: headers, 
footers, navigation, main, etc. In this section, you can use #ID or .class selectors to style these structural elements, 
ensuring that the layout is visually organized and functional. */

/* Header Styles */
header {
  background-color: #2c3e50; /* Dark background for the header */
  color: #fff; /* White text color */
  padding: 1rem; /* Padding around the content */
  text-align: center; /* Centered text */
}

/* Navigation Styles */
nav {
  background-color: #34495e; /* Slightly lighter dark background */
  padding: 1rem; /* Padding around navigation */
  text-align: center; /* Centered navigation items */
}

nav a {
  color: #ecf0f1; /* Light color for links */
  margin: 0 1rem; /* Space between links */
  text-decoration: none; /* No underline */
}

nav a:hover {
  text-decoration: underline; /* Underline on hover */
}

/* Main Content Styles */
main {
  max-width: 1200px; /* Max width of main content area */
  margin: 0 auto; /* Center the main content */
  padding: 2rem; /* Padding around main content */
}

/* Footer Styles */
footer {
  background-color: #2c3e50; /* Dark background for the footer */
  color: #fff; /* White text color */
  text-align: center; /* Centered text */
  padding: 1rem; /* Padding around footer */
  position: relative; /* Position footer relative to other elements */
  bottom: 0; /* Align footer to the bottom */
  width: 100%; /* Full width footer */
}

/* Sidebar Styles (if applicable) */
aside {
  background-color: #ecf0f1; /* Light background for sidebar */
  padding: 1rem; /* Padding around sidebar content */
  border: 1px solid #bdc3c7; /* Light gray border */
  margin: 1rem 0; /* Space above and below sidebar */
}

/* Grid Styles (if using a grid layout) */
.grid-container {
  display: grid; /* Enable grid layout */
  grid-template-columns: repeat(
    auto-fill,
    minmax(200px, 1fr)
  ); /* Responsive columns */
  gap: 1rem; /* Space between grid items */
  padding: 1rem; /* Padding around the grid */
}

.grid-item {
  background-color: #fff; /* White background for grid items */
  padding: 1rem; /* Inner spacing for grid items */
  border: 1px solid #bdc3c7; /* Light gray border */
  text-align: center; /* Center content in grid items */
}

/* Card Styles (if applicable) */
.card {
  background-color: #fff; /* White background for cards */
  padding: 1rem; /* Inner spacing for cards */
  border: 1px solid #bdc3c7; /* Light gray border */
  border-radius: 8px; /* Rounded corners */
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); /* Subtle shadow */
}

/* Clearfix for floated elements (if necessary) */
.clearfix::after {
  content: "";
  clear: both; /* Clear floated elements */
  display: table; /* Enable clearfix */
}

/* 4. Component Styles 
This section is for styling specific components or modules of the webpage, like buttons, forms, cards, and other distinct 
elements. Think of it as customizing individual walls and windows in each room of your house to give them their unique look 
and functionality. This is where you can apply specific styles to enhance the appearance and usability of these elements 
without affecting the overall layout or global styles. */

/* Button Styles */
.button {
  background-color: #3498db; /* Blue background */
  color: #fff; /* White text color */
  padding: 0.5rem 1rem; /* Padding around the button */
  border: none; /* No border */
  border-radius: 4px; /* Rounded corners */
  cursor: pointer; /* Pointer cursor on hover */
  font-size: 1rem; /* Font size */
  transition: background-color 0.3s ease; /* Smooth background transition */
}

.button:hover {
  background-color: #2980b9; /* Darker blue on hover */
}

/* Form Styles */
form {
  display: flex; /* Flexbox for layout */
  flex-direction: column; /* Stack elements vertically */
  gap: 1rem; /* Space between form elements */
  max-width: 400px; /* Max width of the form */
  margin: 0 auto; /* Center the form */
}

/* Input Styles */
input[type="text"],
input[type="email"],
input[type="password"],
select {
  padding: 0.5rem; /* Padding inside input fields */
  border: 1px solid #bdc3c7; /* Light gray border */
  border-radius: 4px; /* Rounded corners */
  font-size: 1rem; /* Font size */
  width: 100%; /* Full width */
}

/* Textarea Styles */
textarea {
  padding: 0.5rem; /* Padding inside textarea */
  border: 1px solid #bdc3c7; /* Light gray border */
  border-radius: 4px; /* Rounded corners */
  font-size: 1rem; /* Font size */
  width: 100%; /* Full width */
  resize: vertical; /* Allow vertical resizing only */
}

/* Card Styles */
.card {
  background-color: #fff; /* White background for cards */
  padding: 1rem; /* Inner spacing for cards */
  border: 1px solid #bdc3c7; /* Light gray border */
  border-radius: 8px; /* Rounded corners */
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); /* Subtle shadow */
}

/* Alert Styles */
.alert {
  padding: 1rem; /* Padding inside alert boxes */
  border-radius: 4px; /* Rounded corners */
  margin-bottom: 1rem; /* Space below alerts */
}

.alert-success {
  background-color: #d4edda; /* Light green background */
  color: #155724; /* Dark green text */
}

.alert-error {
  background-color: #f8d7da; /* Light red background */
  color: #721c24; /* Dark red text */
}

/* List Styles */
ul {
  list-style-type: disc; /* Bullet points */
  padding-left: 1.5rem; /* Space for bullet points */
}

li {
  margin-bottom: 0.5rem; /* Space between list items */
}

/* Image Styles */
.img-responsive {
  max-width: 100%; /* Responsive image */
  height: auto; /* Maintain aspect ratio */
}

/* Table Styles */
table {
  width: 100%; /* Full width */
  border-collapse: collapse; /* Collapse borders */
  margin-top: 1rem; /* Space above tables */
}

th,
td {
  padding: 0.75rem; /* Padding inside table cells */
  border: 1px solid #bdc3c7; /* Light gray border */
  text-align: left; /* Left align text */
}

th {
  background-color: #f2f2f2; /* Light gray background for headers */
}

/* Tooltip Styles */
.tooltip {
  position: relative; /* Position relative for tooltip */
}

.tooltip .tooltip-text {
  visibility: hidden; /* Hidden by default */
  background-color: #555; /* Dark background for tooltip */
  color: #fff; /* White text */
  text-align: center; /* Center text */
  border-radius: 4px; /* Rounded corners */
  padding: 0.5rem; /* Padding */
  position: absolute; /* Absolute positioning */
  z-index: 1; /* Above other elements */
}

.tooltip:hover .tooltip-text {
  visibility: visible; /* Show tooltip on hover */
  bottom: 125%; /* Position above the tooltip */
  left: 50%; /* Center tooltip */
  margin-left: -60px; /* Center tooltip */
}

/* 5. Utility Classes
Create simple, reusable styles for things like spacing (margin and padding), and text alignment. You can use these classes 
anywhere on your site to make it look nice and consistent! */

/* Margin Utility Classes */
.mt-0 {
  margin-top: 0;
}
.mt-1 {
  margin-top: 0.5rem;
}
.mt-2 {
  margin-top: 1rem;
}
.mt-3 {
  margin-top: 1.5rem;
}
.mt-4 {
  margin-top: 2rem;
}

.mb-0 {
  margin-bottom: 0;
}
.mb-1 {
  margin-bottom: 0.5rem;
}
.mb-2 {
  margin-bottom: 1rem;
}
.mb-3 {
  margin-bottom: 1.5rem;
}
.mb-4 {
  margin-bottom: 2rem;
}

.ml-0 {
  margin-left: 0;
}
.ml-1 {
  margin-left: 0.5rem;
}
.ml-2 {
  margin-left: 1rem;
}
.ml-3 {
  margin-left: 1.5rem;
}
.ml-4 {
  margin-left: 2rem;
}

.mr-0 {
  margin-right: 0;
}
.mr-1 {
  margin-right: 0.5rem;
}
.mr-2 {
  margin-right: 1rem;
}
.mr-3 {
  margin-right: 1.5rem;
}
.mr-4 {
  margin-right: 2rem;
}

/* Padding Utility Classes */
.pt-0 {
  padding-top: 0;
}
.pt-1 {
  padding-top: 0.5rem;
}
.pt-2 {
  padding-top: 1rem;
}
.pt-3 {
  padding-top: 1.5rem;
}
.pt-4 {
  padding-top: 2rem;
}

.pb-0 {
  padding-bottom: 0;
}
.pb-1 {
  padding-bottom: 0.5rem;
}
.pb-2 {
  padding-bottom: 1rem;
}
.pb-3 {
  padding-bottom: 1.5rem;
}
.pb-4 {
  padding-bottom: 2rem;
}

.pl-0 {
  padding-left: 0;
}
.pl-1 {
  padding-left: 0.5rem;
}
.pl-2 {
  padding-left: 1rem;
}
.pl-3 {
  padding-left: 1.5rem;
}
.pl-4 {
  padding-left: 2rem;
}

.pr-0 {
  padding-right: 0;
}
.pr-1 {
  padding-right: 0.5rem;
}
.pr-2 {
  padding-right: 1rem;
}
.pr-3 {
  padding-right: 1.5rem;
}
.pr-4 {
  padding-right: 2rem;
}

/* Text Alignment Utility Classes */
.text-left {
  text-align: left;
}
.text-center {
  text-align: center;
}
.text-right {
  text-align: right;
}
.text-justify {
  text-align: justify;
}

/*Example Use
        <div class="mt-3 mb-4 text-center">
            <h1>Welcome to My Site</h1>
        </div>
        <p class="text-left pt-2">This is a paragraph with top padding.</p>
        */

/* 6. Media Queries (Optional)
Add styles here that help your website look good on different screen sizes (like phones and tablets). Put these at the end 
of your stylesheet so they can change the styles that came before them if needed. */

/* Styles for devices with a max width of 768px (Tablets and smaller) */
@media (max-width: 768px) {
  body {
    font-size: 16px; /* Adjust font size for readability */
  }

  header {
    padding: 10px; /* Reduce padding in header */
  }

  .container {
    flex-direction: column; /* Stack elements vertically */
  }

  .marker {
    width: 80%; /* Make markers responsive */
    margin: 0 auto; /* Center markers */
  }
}

/* Styles for devices with a max width of 480px (Mobile phones) */
@media (max-width: 480px) {
  body {
    font-size: 14px; /* Further adjust font size for small screens */
  }

  header h1 {
    font-size: 24px; /* Reduce header font size */
  }

  .cap {
    width: 50px; /* Adjust cap size for small screens */
    height: 20px;
  }

  .sleeve {
    width: 90px; /* Adjust sleeve size for small screens */
    height: 20px;
  }

  .marker {
    margin: 10px 0; /* Add margin between markers */
  }
}
/*  NOTES */
/*
Notes: 
A pseudo-selector in CSS is used to style elements based on their state or position 
in the document, even if those states aren’t explicitly defined in the HTML.


Use an id='name' on the html for a unique element that appears only once on the page. 
id is selected with #ID on the stylesheet.

Use .class='name' in the html for styling or functionality that will apply to multiple 
elements. 
class is selected with .class in the stylesheet. 



 With hex colors, 00 is 0% of that color, and FF is 100%. So #00FF00 translates to 0% red, 100% green, 
 The HSL color model, or hue, saturation, and lightness, is another way to represent colors.
 The CSS hsl function accepts 3 values: a number from 0 to 360 for hue, a percentage from 0 to 100 
 for saturation, and a percentage from 0 to 100 for lightness.
 If you imagine a color wheel, the hue red is at 0 degrees, green is at 120 degrees, and blue 
 is at 240 degrees.
 Saturation is the intensity of a color from 0%, or gray, to 100% for pure color. You must include
 the percent sign % to the saturation and lightness values.
 Lightness is how bright a color appears, from 0%, or complete black, to 100%, complete white, 
 with 50% being neutral.

  If no gradientDirection argument is provided to the linear-gradient function, it arranges colors from 
  top to bottom, or along a 180 degree line, by default.

Color-stops allow you to fine-tune where colors are placed along the gradient line. They are a length 
 unit like px or percentages that follow a color in the linear-gradient function. The linear-gradient 
 function automatically calculates these values for you, and places colors evenly along the gradient 
 line by default.  They color-stop values in .red are unnecessary

box-shadow: offsetX offsetY blurRadius spreadRadiuscolor; 
  both offsetX and offsetY accept number values in px and other CSS units
  a positive offsetX value moves the shadow right and a negative value moves it left
  a positive offsetY value moves the shadow down and a negative value moves it up
  if you want a value of zero (0) for any or both offsetX and offsetY, you don't need 
  to add a unit. Every browser understands that zero means no change.
  The height and width of the shadow is determined by the height and width of the element 
  it's applied to. You can also use an optional spreadRadius value to spread out the reach 
  of the shadow. More on that later.
  If a blurRadius value isn't included, it defaults to 0 and produces sharp edges. The higher
  the value of blurRadius, the greater the blurring effect is.

 With the CSS opacity property, you can control how opaque or transparent an element is.
 With the value 0, or 0%, the element will be completely transparent, and at 1.0, or 100%, 
 the element will be completely opaque like it is by default.

 alpha channel also controls opacity using rgba(redValue, greenValue, blueValue, alphaValue);

inline-block elements only take up the width of their container which might necessitate a 
  width property that container 



Notes:
The vh unit stands for viewport height, and is equal to 1% of the height 
   of the viewport. This makes it relative to the viewport height. Best not
   used for text sizing.

em (element): The unit is relative to the font size of the parent element.  
  It is particularly useful for components that should scale with a local
  container’s size.  For example, if a parent element has a font size of 
  16px and you set {padding: 2em;}, the padding will be 2 * 16px = 32px.
	
rem (root element): The unit is relative to the font size of the root (HTML)
   element, typically defined as 16px by default in most browsers. You need 
   consistent sizing based on the root element’s font size (usually for global 
   scaling). It’s ideal when you want to keep sizes consistent across the whole 
   page, regardless of local font size changes. 1rem always equals the root 
   font size, regardless of the font size of parent elements.

direction notation   
  padding: top right bottom left;
  padding: 2rem 0 2rem 0;

  padding: top-bottom left-right; 
  padding: 2rem 0;

  padding: all-directions;
  padding: 2rem;
*/

/*--------------------------------------------------- THE CASCADE ---------------------------------------------------*/
/*
    The cascade in CSS refers to the way styles are applied to elements based on their specificity and the order
        in which they are defined. Here’s a breakdown of how CSS rules interact, including inline, internal, and 
        external styles:

    1. Inline Styling is applied directly within an HTML element using the style attribute. 
        <h1 style="color: blue;">Hello World</h1>
        Inline styles have the highest specificity and will override styles defined in both 
        internal and external stylesheets, regardless of their order.

    2. Internal Styling is defined within a <style> tag in the <head> section of an HTML document. Internal 
        styles have a lower specificity than inline styles but higher than external styles. If an internal 
        style conflicts with an external style, the internal style will take precedence if it comes later 
        in the stylesheet.

    3. External Styling is defined in a separate CSS file linked to an HTML document using the <link> tag. 
        External styles have the lowest specificity compared to inline and internal styles. If an external 
        style conflicts with an internal style or an inline style, those latter styles will take precedence.
        !important: A rule can be made to take precedence over all other rules by appending !important to 
        the property.
        h1 {
            color: green !important;
            }

    4. Specificity and Importance

        If multiple styles apply to the same element, the browser determines which one to use based on 
        specificity:
        Specificity Ranking

        1.	Inline Styles (highest)
        2.	IDs  #myElement { color: blue; }
        3.	Classes .myClass { color: red; }
        4.	Type Selectors (lowest) These are the actual HTML element names.  p { color: green; }

    Specificity Calculation
        To illustrate your example with an element having a class, an ID, and a type selector all targeting 
        the same property (color):
        <p id="myParagraph" class="myClass">Hello, World!</p>   
            #myParagraph { color: blue; }     ID selector 
            .myClass { color: red; }           Class selector 
            p { color: green; }                Type selector 

    Result:  Hello, World! will be blue
    */

/*

    <!--It's better practice to choose one color as the dominant color, and use its complementary 
        color as an accent to bring attention to certain content on the page.
        Two colors that are opposite from each other on the color wheel are called complementary colors. 
        If two complementary colors are combined, they produce gray. But when they are placed side-by-side, 
        these colors produce strong visual contrast and appear brighter.
        rgb(255,0,0) & rgb(0,255,255) are opposite each other.-->
    <!--
        With hex colors, 00 is 0% of that color, and FF is 100%. So #00FF00 translates to 0% red, 100% green, 
        and 0% blue, and is the same as rgb(0, 255, 0).  FF -> 255, 7F -> 127
        -->
    <!--The HSL color model, or hue, saturation, and lightness, is another way to represent colors.
        The CSS hsl function accepts 3 values: a number from 0 to 360 for hue, a percentage from 0 to 100 
        for saturation, and a percentage from 0 to 100 for lightness.
        If you imagine a color wheel, the hue red is at 0 degrees, green is at 120 degrees, and blue 
        is at 240 degrees.
        Saturation is the intensity of a color from 0%, or gray, to 100% for pure color. You must include 
        the percent sign % to the saturation and lightness values.
        Lightness is how bright a color appears, from 0%, or complete black, to 100%, complete white, 
        with 50% being neutral.-->
*/
